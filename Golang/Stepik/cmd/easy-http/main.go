package main

import (
	v1 "easyhttp/internal/http/v1"
	"easyhttp/internal/ldap"
	"net/http"
)

// для запросов из vscode удобно использовать thunderclient
// http2 в действии

// TODO:
// 1) определить методы GET и POST +
// 2) прикрутить HTML шаблон +
// 3) Сделать GET запрос на бекенд с query параметрами, считать параметры +
// 5) Сделать POST запрос с json телом и обработать его внутри программы( считать в структуру и вывести в stdout) +
// 6) Отдавать корректные статус коды на запросы +
// 7) Пункт со звездочкой - прикрутить middleware, для авторизации (брать header Authorization и получить из него Bearer ***, проверять и выдавать корректный результат)
// 4) Сделать sumbit из HTML на бекенд, считать параметры

// Cock передать информацию на бекенд через метод GET
// 1) Мы передаем адресную строку (URL параметры)
// 2) Мы передаем параметры query
// 3) Заголовки

// 1) Описать контракт для входящего JSON чтобы парсить с него данные
// 2) Нужно написать сервис (внутренний) для работы с базой данных (можно использовать gorm)
// 3) Нужно описать контракт для исходящего сообщения (которое будут дергать снаружи фронты)
// как пример GET /traffic/{town}/{street}/{home}/{place}

// процесс
// 1) кто то в наше приложение пушит например JSON на URL типа
// POST /traffic/{town}/{street}/{home}/{place}
// 2) информация записывается в БД
// 3) если информация которая пушится говорит нам только о тех посетителях которые приходят, продумать алгоритм очищения нашего места от пользователей (например освобождать его каждые 2 часа итп)

func main() {
	ldapService := ldap.NewService()

	v1.RegisterRoutes(ldapService)

	err := http.ListenAndServe(":8090", nil)
	if err != nil {
		panic(err)
	}
}
